"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const rimraf_1 = __importDefault(require("rimraf"));
const store_1 = require("./store");
function getStoredRevision() {
    return __awaiter(this, void 0, void 0, function* () {
        const storeDir = yield store_1.getStoreDir();
        try {
            const revision = fs_1.readFileSync(path_1.resolve(storeDir, "chromium", "revision"), "utf8");
            return parseInt(revision, 10);
        }
        catch (_e) {
            return 0;
        }
    });
}
exports.getStoredRevision = getStoredRevision;
function updateStoredRevision(newRevision) {
    return __awaiter(this, void 0, void 0, function* () {
        const storeDir = yield store_1.getStoreDir();
        fs_1.writeFileSync(path_1.resolve(storeDir, "chromium", "revision"), newRevision);
    });
}
exports.updateStoredRevision = updateStoredRevision;
function getChromePath() {
    return __awaiter(this, void 0, void 0, function* () {
        let executable = "";
        let subfolder = "";
        if (process.platform === "linux") {
            executable = "chrome";
            subfolder = "chrome-linux";
        }
        else if (process.platform === "darwin") {
            executable = "Chromium.app/Contents/MacOS/Chromium";
            subfolder = "chrome-mac";
        }
        else if (process.platform === "win32") {
            executable = "chrome.exe";
            subfolder = "chrome-win";
        }
        else {
            throw new Error("invalid_platform");
        }
        const storeDir = yield store_1.getStoreDir();
        return path_1.resolve(storeDir, "chromium", subfolder, executable);
    });
}
exports.getChromePath = getChromePath;
function isChromiumAlreadyInstalled() {
    return __awaiter(this, void 0, void 0, function* () {
        const storeDir = yield store_1.getStoreDir();
        try {
            if (fs_1.lstatSync(`${storeDir}/chromium`).isDirectory()) {
                return true;
            }
            else {
                return false;
            }
        }
        catch (e) {
            return false;
        }
    });
}
exports.isChromiumAlreadyInstalled = isChromiumAlreadyInstalled;
function cleanChromiumDirectory() {
    return __awaiter(this, void 0, void 0, function* () {
        const storeDir = yield store_1.getStoreDir();
        return new Promise(function (resolve, reject) {
            return __awaiter(this, void 0, void 0, function* () {
                if (yield isChromiumAlreadyInstalled()) {
                    rimraf_1.default(`${storeDir}/chromium`, function (err) {
                        if (err) {
                            reject(err);
                        }
                        else {
                            resolve();
                        }
                    });
                }
                else {
                    resolve();
                }
            });
        });
    });
}
exports.cleanChromiumDirectory = cleanChromiumDirectory;
