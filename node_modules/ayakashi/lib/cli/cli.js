"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = __importDefault(require("yargs"));
const runner_1 = require("../runner/runner");
const opLog_1 = require("../opLog/opLog");
const downloader_1 = require("../chromeDownloader/downloader");
const chromium_1 = require("../store/chromium");
const manifest_1 = require("../store/manifest");
const getDirectory_1 = require("./getDirectory");
const prepareStandard_1 = require("./prepareStandard");
const prepareSimple_1 = require("./prepareSimple");
const prepareFromJson_1 = require("./prepareFromJson");
const getName_1 = require("./scaffold/getName");
const generateProp_1 = require("./scaffold/generateProp");
const generateAction_1 = require("./scaffold/generateAction");
const generateExtractor_1 = require("./scaffold/generateExtractor");
const generatePreloader_1 = require("./scaffold/generatePreloader");
const generateScraper_1 = require("./scaffold/generateScraper");
const generateRenderlessScraper_1 = require("./scaffold/generateRenderlessScraper");
const generateApiScraper_1 = require("./scaffold/generateApiScraper");
const generateScript_1 = require("./scaffold/generateScript");
const generateProject_1 = require("./scaffold/generateProject");
const showUpdate_1 = require("./update/showUpdate");
const packageJson = require("../../package.json");
yargs_1.default
    //@ts-ignore
    .command("run [dir]", "Runs a project", (_argv) => {
    yargs_1.default
        .positional("dir", {
        describe: "The root directory of a project or a scraper file when --simple mode is used",
        default: "."
    })
        .option("configFile", {
        describe: "Use an alternative configFile",
        alias: "c",
        default: ""
    })
        .option("jsonConfig", {
        describe: "Use a json string as config",
        alias: "jc"
    })
        .option("sessionKey", {
        describe: "Use a specific run session",
        default: "default",
        coerce: function (v) {
            return String(v);
        }
    })
        .option("simple", {
        type: "boolean",
        describe: "Run a single scraper"
    })
        .option("simpleRenderless", {
        type: "boolean",
        describe: "Run a single renderlessScraper"
    })
        .option("simpleApi", {
        type: "boolean",
        describe: "Run a single apiScraper"
    })
        .option("resume", {
        type: "boolean",
        describe: "Resume execution of a previous unfinished run"
    })
        .option("restartDisabledSteps", {
        type: "boolean",
        describe: "Will restart all steps that terminated due to an error. Only works when --resume is used"
    })
        .option("clean", {
        type: "boolean",
        describe: "Clear the previous run if it exists and start from the beginning"
    })
        .option("out", {
        describe: "Select the saving format when --simple mode is used",
        default: "stdout",
        choices: ["sqlite", "csv", "json", "stdout"]
    })
        .epilogue("Learn more at https://ayakashi.io/docs/reference/cli-commands.html#run");
}, function (argv) {
    return __awaiter(this, void 0, void 0, function* () {
        const opLog = opLog_1.getOpLog();
        opLog.info("Ayakashi version:", packageJson.version);
        yield showUpdate_1.showLineUpdate();
        const resume = argv.resume || false;
        const restartDisabledSteps = argv.restartDisabledSteps || false;
        const clean = argv.clean || false;
        let directory;
        let config;
        let simpleScraper = null;
        if (argv.jsonConfig) {
            const fromJson = prepareFromJson_1.prepareFromJson(argv.dir, argv.jsonConfig);
            config = fromJson.config;
            directory = fromJson.directory;
        }
        else {
            if (argv.simple) {
                const simple = prepareSimple_1.prepareSimple(argv.dir, argv.out, "scraper");
                config = simple.config;
                directory = simple.directory;
                simpleScraper = simple.scraper;
            }
            else if (argv.simpleRenderless) {
                const simple = prepareSimple_1.prepareSimple(argv.dir, argv.out, "renderlessScraper");
                config = simple.config;
                directory = simple.directory;
                simpleScraper = simple.scraper;
            }
            else if (argv.simpleApi) {
                const simple = prepareSimple_1.prepareSimple(argv.dir, argv.out, "apiScraper");
                config = simple.config;
                directory = simple.directory;
                simpleScraper = simple.scraper;
            }
            else {
                const standard = prepareStandard_1.prepareStandard(argv.dir, argv.configFile);
                config = standard.config;
                directory = standard.directory;
            }
        }
        runner_1.run(directory, config, {
            resume: resume,
            restartDisabledSteps: restartDisabledSteps,
            clean: clean,
            simpleScraper: simpleScraper,
            sessionKey: argv.sessionKey
        }).then(function () {
            return __awaiter(this, void 0, void 0, function* () {
                opLog.info("Nothing more to do!");
                yield showUpdate_1.showBoxUpdate();
            });
        }).catch(function (err) {
            opLog.error("Something went wrong", err);
            process.exit(1);
        });
    });
})
    //@ts-ignore
    .command("new [dir]", "Generates a new project", (_argv) => {
    yargs_1.default
        .positional("dir", {
        describe: "Where to place the generated files",
        default: "."
    })
        .option("project", {
        type: "boolean",
        describe: "Generate a new project"
    })
        .option("scraper", {
        type: "boolean",
        describe: "Generate a new scraper"
    })
        .option("renderlessScraper", {
        type: "boolean",
        describe: "Generate a new renderlessScraper"
    })
        .option("apiScraper", {
        type: "boolean",
        describe: "Generate a new apiScraper"
    })
        .option("script", {
        type: "boolean",
        describe: "Generate a new script"
    })
        .option("prop", {
        type: "boolean",
        describe: "Generate a new prop"
    })
        .option("action", {
        type: "boolean",
        describe: "Generate a new action"
    })
        .option("extractor", {
        type: "boolean",
        describe: "Generate a new extractor"
    })
        .option("preloader", {
        type: "boolean",
        describe: "Generate a new preloader"
    })
        .option("name", {
        type: "string",
        describe: "The name of the new scraper|renderlessScraper|script|prop|action|extractor|preloader"
    })
        .epilogue("Learn more at https://ayakashi.io/docs/reference/cli-commands.html#new");
    //@ts-ignore
}, function (argv) {
    return __awaiter(this, void 0, void 0, function* () {
        //tslint:disable cyclomatic-complexity
        const opLog = opLog_1.getOpLog();
        if ((!argv.prop && !argv.project && !argv.action && !argv.extractor &&
            !argv.preloader && !argv.scraper && !argv.renderlessScraper &&
            !argv.apiScraper && !argv.script) || argv.project) {
            if (argv.dir === ".") {
                yield generateProject_1.generateProject(getDirectory_1.getDirectory(argv.dir), true);
            }
            else {
                yield generateProject_1.generateProject(getDirectory_1.getDirectory(argv.dir, false), false);
            }
        }
        else if (argv.prop) {
            const name = yield getName_1.getName(argv.name, "prop");
            if (!name) {
                opLog.error("Invalid prop name");
                process.exit(1);
            }
            yield generateProp_1.generateProp(getDirectory_1.getDirectory(argv.dir), name);
        }
        else if (argv.action) {
            const name = yield getName_1.getName(argv.name, "action");
            if (!name) {
                opLog.error("Invalid action name");
                process.exit(1);
            }
            yield generateAction_1.generateAction(getDirectory_1.getDirectory(argv.dir), name);
        }
        else if (argv.extractor) {
            const name = yield getName_1.getName(argv.name, "extractor");
            if (!name) {
                opLog.error("Invalid extractor name");
                process.exit(1);
            }
            yield generateExtractor_1.generateExtractor(getDirectory_1.getDirectory(argv.dir), name);
        }
        else if (argv.preloader) {
            const name = yield getName_1.getName(argv.name, "preloader");
            if (!name) {
                opLog.error("Invalid preloader name");
                process.exit(1);
            }
            yield generatePreloader_1.generatePreloader(getDirectory_1.getDirectory(argv.dir), name);
        }
        else if (argv.scraper) {
            const name = yield getName_1.getName(argv.name, "scraper");
            if (!name) {
                opLog.error("Invalid scraper name");
                process.exit(1);
            }
            yield generateScraper_1.generateScraper(getDirectory_1.getDirectory(argv.dir), name);
        }
        else if (argv.renderlessScraper) {
            const name = yield getName_1.getName(argv.name, "renderlessScraper");
            if (!name) {
                opLog.error("Invalid renderlessScraper name");
                process.exit(1);
            }
            yield generateRenderlessScraper_1.generateRenderlessScraper(getDirectory_1.getDirectory(argv.dir), name);
        }
        else if (argv.apiScraper) {
            const name = yield getName_1.getName(argv.name, "apiScraper");
            if (!name) {
                opLog.error("Invalid apiScraper name");
                process.exit(1);
            }
            yield generateApiScraper_1.generateApiScraper(getDirectory_1.getDirectory(argv.dir), name);
        }
        else if (argv.script) {
            const name = yield getName_1.getName(argv.name, "script");
            if (!name) {
                opLog.error("Invalid script name");
                process.exit(1);
            }
            yield generateScript_1.generateScript(getDirectory_1.getDirectory(argv.dir), name);
        }
        yield showUpdate_1.showBoxUpdate();
    });
})
    //@ts-ignore
    .command("update-chrome", "Updates/Downloads the latest chromium revision", (_argv) => {
    yargs_1.default
        .epilogue("Learn more at https://ayakashi.io/docs/reference/cli-commands.html#update-chrome");
    //@ts-ignore
}, function (argv) {
    return __awaiter(this, void 0, void 0, function* () {
        const opLog = opLog_1.getOpLog();
        const storedRevision = yield chromium_1.getStoredRevision();
        const manifest = yield manifest_1.getManifest();
        if (storedRevision < manifest.chromium.revision || !(yield chromium_1.isChromiumAlreadyInstalled())) {
            yield chromium_1.cleanChromiumDirectory();
            yield downloader_1.downloadChromium(manifest.chromium.revision);
        }
        else {
            opLog.info("Chromium is already at the latest recommended revision");
        }
    });
})
    //@ts-ignore
    .command("get-chrome", "Downloads the latest chromium revision if one is not already installed", (_argv) => {
    yargs_1.default
        .epilogue("Learn more at https://ayakashi.io/docs/reference/cli-commands.html#get-chrome");
    //@ts-ignore
}, function (argv) {
    return __awaiter(this, void 0, void 0, function* () {
        const opLog = opLog_1.getOpLog();
        if (yield chromium_1.isChromiumAlreadyInstalled()) {
            opLog.info("chromium is already installed, use update-chrome to update");
        }
        else {
            const manifest = yield manifest_1.getManifest();
            yield chromium_1.cleanChromiumDirectory();
            yield downloader_1.downloadChromium(manifest.chromium.revision);
        }
    });
})
    //@ts-ignore
    .command("info", "System information", (_argv) => {
    //@ts-ignore
}, function (argv) {
    return __awaiter(this, void 0, void 0, function* () {
        const opLog = opLog_1.getOpLog();
        const storedRevision = yield chromium_1.getStoredRevision();
        opLog.info(`Ayakashi version: ${packageJson.version}`);
        if (yield chromium_1.isChromiumAlreadyInstalled()) {
            opLog.info(`Chromium revision: ${storedRevision}`);
        }
        else {
            opLog.info(`Chromium revision: none`);
        }
        yield showUpdate_1.showBoxUpdate();
    });
})
    .demandCommand().recommendCommands().strict()
    .epilogue("Learn more at https://ayakashi.io/docs/reference/cli-commands.html")
    .argv;
