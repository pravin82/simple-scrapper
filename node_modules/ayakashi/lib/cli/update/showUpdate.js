"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const opLog_1 = require("../../opLog/opLog");
const chalk_1 = __importDefault(require("chalk"));
const semver_1 = __importDefault(require("semver"));
const chromium_1 = require("../../store/chromium");
const manifest_1 = require("../../store/manifest");
const packageJson = require("../../../package.json");
function showBoxUpdate() {
    return __awaiter(this, void 0, void 0, function* () {
        const opLog = opLog_1.getOpLog();
        const manifest = yield manifest_1.getManifest();
        const storedRevision = yield chromium_1.getStoredRevision();
        const box = opLog.incrementalMessageBox({ color: "yellow", margin: 1 });
        if (semver_1.default.gt(manifest.ayakashi.version, packageJson.version)) {
            box.add([
                "A new Ayakashi version is available",
                `${chalk_1.default.gray(packageJson.version)} â†’ ${chalk_1.default.green(manifest.ayakashi.version)}`,
                "",
                `Run ${chalk_1.default.cyan("npm update -g ayakashi")} to update`,
                "",
                `See what's new at ${chalk_1.default.underline.yellowBright("https://changelog.ayakashi.io")}`
            ]);
        }
        else {
            if (!(yield chromium_1.isChromiumAlreadyInstalled())) {
                box.add([
                    "It seems Chromium is not installed",
                    `Run ${chalk_1.default.cyan("ayakashi get-chrome")} to download it`
                ]);
            }
            else if (storedRevision < manifest.chromium.revision) {
                box.add([
                    "A new recommended Chromium revision is available",
                    `Run ${chalk_1.default.cyan("ayakashi update-chrome")} to update`
                ]);
            }
        }
        box.render();
    });
}
exports.showBoxUpdate = showBoxUpdate;
function showLineUpdate() {
    return __awaiter(this, void 0, void 0, function* () {
        const opLog = opLog_1.getOpLog();
        const manifest = yield manifest_1.getManifest();
        const storedRevision = yield chromium_1.getStoredRevision();
        if (semver_1.default.gt(manifest.ayakashi.version, packageJson.version)) {
            opLog.warn("A new Ayakashi version is available");
        }
        if (storedRevision < manifest.chromium.revision) {
            opLog.warn("A new recommended Chromium revision is available");
        }
    });
}
exports.showLineUpdate = showLineUpdate;
