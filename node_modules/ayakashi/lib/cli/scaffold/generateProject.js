"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mkdirp_1 = __importDefault(require("mkdirp"));
const util_1 = require("util");
const fs_1 = require("fs");
const child_process_1 = require("child_process");
const opLog_1 = require("../../opLog/opLog");
const generateScraper_1 = require("./generateScraper");
const generateScript_1 = require("./generateScript");
const mkdirp = util_1.promisify(mkdirp_1.default);
const writeFile = util_1.promisify(fs_1.writeFile);
const readdir = util_1.promisify(fs_1.readdir);
function generateProject(projectDir, useCurrentFolder) {
    return __awaiter(this, void 0, void 0, function* () {
        const opLog = opLog_1.getOpLog();
        try {
            const filesInDir = yield readdir(projectDir);
            if (filesInDir.length > 0) {
                opLog.error(`${projectDir} is not empty`);
                return;
            }
        }
        catch (_e) { }
        if (!useCurrentFolder) {
            yield mkdirp(projectDir);
        }
        process.chdir(projectDir);
        opLog.info(`creating new project in ${projectDir}`);
        opLog.info("generating config file");
        yield writeFile("ayakashi.config.js", getConfig());
        opLog.info("generating package.json");
        yield writeFile("package.json", getpackageJson());
        yield generateScraper_1.generateScraper(projectDir, "githubAbout");
        yield generateScript_1.generateScript(projectDir, "getPage");
        yield writeFile(".gitignore", getGitIgnore());
        let npm = "npm";
        if (process.platform === "win32") {
            npm = "npm.cmd";
        }
        yield runNpmInstall(npm);
        opLog.messageBox([
            "Your project is ready!",
            "Get started:",
            "https://ayakashi.io/docs/getting_started",
            "",
            "You may run your new project with:",
            "ayakashi run"
        ]);
    });
}
exports.generateProject = generateProject;
function getConfig() {
    return (`/**
* @type {import("@ayakashi/types").Config}
*/
module.exports = {
    config: {},
    waterfall: [{
        type: "script",
        module: "getPage"
    }, {
        type: "scraper",
        module: "githubAbout"
    }, {
        type: "script",
        module: "printToConsole"
    }]
};
`);
}
function getpackageJson() {
    return (`{
    "name": "my-project",
    "version": "1.0.0",
    "description": "An ayakashi project",
    "homepage": "https://ayakashi.io",
    "main": "ayakashi.config.js",
    "keywords": [
      "ayakashi"
    ],
    "scripts": {
      "start": "ayakashi run"
    },
    "author": "",
    "license": "ISC",
    "dependencies": {
      "@ayakashi/types": "^1.0.0-beta1"
    }
  }
`);
}
function getGitIgnore() {
    return (`node_modules
`);
}
function runNpmInstall(npm) {
    const opLog = opLog_1.getOpLog();
    const waiter = opLog.waiter("installing dependencies");
    return new Promise(function (resolve) {
        child_process_1.exec(`${npm} install`, function (err) {
            if (err) {
                waiter.fail("failed to run npm install, please run it manually");
                console.error(err.message);
            }
            else {
                waiter.succeed("dependencies installed!");
            }
            resolve();
        });
    });
}
