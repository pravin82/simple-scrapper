"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mkdirp_1 = __importDefault(require("mkdirp"));
const util_1 = require("util");
const path_1 = require("path");
const fs_1 = require("fs");
const opLog_1 = require("../../opLog/opLog");
const mkdirp = util_1.promisify(mkdirp_1.default);
const writeFile = util_1.promisify(fs_1.writeFile);
const exists = util_1.promisify(fs_1.exists);
function generateProp(directory, name) {
    return __awaiter(this, void 0, void 0, function* () {
        const opLog = opLog_1.getOpLog();
        let fileName;
        if (name.indexOf(".js") > -1) {
            fileName = name;
        }
        else {
            fileName = `${name}.js`;
        }
        const propsFolder = path_1.join(directory, "props");
        const filePath = path_1.join(propsFolder, fileName);
        if (yield exists(filePath)) {
            opLog.error(`prop <${name}> already exists in ${filePath}`);
            return;
        }
        opLog.info(`Created <${name}> in ${filePath}`);
        yield mkdirp(propsFolder);
        const content = getContent(name);
        yield writeFile(filePath, content);
    });
}
exports.generateProp = generateProp;
function getContent(name) {
    return (`/**
 * @param {import("@ayakashi/types").IAyakashiInstance} ayakashi
 */
module.exports = function(ayakashi) {
    ayakashi
        .select("${name}")
        .where({id: {eq: "myId"}});
};
`);
}
