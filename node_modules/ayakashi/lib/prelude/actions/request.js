"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
function attachRequest(ayakashiInstance, requestInstance, cookieSyncCallback) {
    const methods = ["get", "post", "put", "patch", "delete", "head"];
    methods.forEach(function (method) {
        ayakashiInstance[method] = function (uri, options) {
            return new Promise(function (resolve, reject) {
                requestInstance[method](uri, options, function (err, response, body) {
                    return __awaiter(this, void 0, void 0, function* () {
                        if (err) {
                            return reject(err);
                        }
                        if (response.statusCode >= 400) {
                            return reject(new Error(`${response.statusCode} - ${truncate(String(body))}`));
                        }
                        yield cookieSyncCallback();
                        if (body) {
                            if (response.headers["content-type"] === "application/json" && typeof body === "string") {
                                const parsedBody = JSON.parse(body);
                                resolve(parsedBody);
                            }
                            else {
                                resolve(body);
                            }
                        }
                        else {
                            resolve();
                        }
                    });
                });
            });
        };
    });
}
exports.attachRequest = attachRequest;
function truncate(str) {
    const buff = Buffer.from(str);
    if (buff.byteLength > 80) {
        return buff.slice(0, 80).toString() + "...";
    }
    else {
        return buff.toString();
    }
}
