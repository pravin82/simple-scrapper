"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const meta_1 = require("./actions/meta");
const join_1 = require("./actions/join");
const select_1 = require("./actions/select");
const extract_1 = require("./actions/extract");
const extractors_1 = require("../coreExtractors/extractors");
const retry_1 = require("./actions/retry");
const click_1 = __importDefault(require("../coreActions/click"));
const focus_1 = __importDefault(require("../coreActions/focus"));
const helpers_1 = __importDefault(require("../coreActions/helpers"));
const hover_1 = __importDefault(require("../coreActions/hover"));
const navigation_1 = __importDefault(require("../coreActions/navigation"));
const options_1 = __importDefault(require("../coreActions/options"));
const scroll_1 = __importDefault(require("../coreActions/scroll"));
const typing_1 = __importDefault(require("../coreActions/typing"));
const waiting_1 = __importDefault(require("../coreActions/waiting"));
//tslint:enable
function prelude(connection) {
    return __awaiter(this, void 0, void 0, function* () {
        const ayakashiInstance = {
            propRefs: {},
            extractors: {},
            __connection: connection
        };
        try {
            yield connection.useNameSpace("ayakashi");
            meta_1.attachMetaActions(ayakashiInstance, connection);
            join_1.attachJoinActions(ayakashiInstance);
            select_1.attachQuery(ayakashiInstance);
            extract_1.attachExtract(ayakashiInstance);
            extractors_1.attachCoreExtractors(ayakashiInstance);
            attachCoreActions(ayakashiInstance);
            retry_1.attachRetry(ayakashiInstance);
            //define head and body props for convenience
            ayakashiInstance.defineProp(function () {
                return document.body;
            }, "body");
            ayakashiInstance.defineProp(function () {
                return document.head;
            }, "head");
            return ayakashiInstance;
        }
        catch (e) {
            console.error(e);
            throw e;
        }
    });
}
exports.prelude = prelude;
function attachCoreActions(ayakashiInstance) {
    click_1.default(ayakashiInstance);
    focus_1.default(ayakashiInstance);
    helpers_1.default(ayakashiInstance);
    hover_1.default(ayakashiInstance);
    navigation_1.default(ayakashiInstance);
    options_1.default(ayakashiInstance);
    scroll_1.default(ayakashiInstance);
    typing_1.default(ayakashiInstance);
    waiting_1.default(ayakashiInstance);
}
