"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = __importDefault(require("@ayakashi/request/core"));
const opLog_1 = require("../opLog/opLog");
const fs_1 = require("fs");
const extract_zip_1 = __importDefault(require("extract-zip"));
const store_1 = require("../store/store");
const chromium_1 = require("../store/chromium");
function downloadChromium(revision) {
    return __awaiter(this, void 0, void 0, function* () {
        const opLog = opLog_1.getOpLog();
        let chromiumArch = "";
        let filename = "";
        if (process.platform === "win32") {
            if (process.arch === "x64") {
                chromiumArch = "Win_x64";
            }
            else if (process.arch === "x32") {
                chromiumArch = "Win";
            }
            filename = "chrome-win";
        }
        if (process.platform === "darwin") {
            chromiumArch = "Mac";
            filename = "chrome-mac";
        }
        if (process.platform === "linux") {
            if (process.arch === "x64") {
                chromiumArch = "Linux_x64";
            }
            else if (process.arch === "x32") {
                throw new Error("Linux_x32 is not supported");
            }
            filename = "chrome-linux";
        }
        if (!chromiumArch) {
            opLog.error("unsupported architecture:", process.platform, "-", process.arch);
            throw new Error("unsupported_architecture");
        }
        opLog.info("downloading latest chromium for", chromiumArch);
        const storeDir = yield store_1.getStoreDir();
        return new Promise(function (resolve, reject) {
            const downloadStream = core_1.default
                .get(`https://storage.googleapis.com/chromium-browser-snapshots/${chromiumArch}/${revision}/${filename}.zip`);
            let total = "0mb";
            let downloaded = 0;
            const waiter = opLog.waiter("0.0MB/0.0MB");
            downloadStream.on("response", function (resp) {
                total = toMb(parseInt(resp.headers["content-length"] || "0"));
            });
            const fileStream = fs_1.createWriteStream(`${storeDir}/chromium.zip`);
            downloadStream.pipe(fileStream);
            downloadStream.on("data", function (chunk) {
                downloaded += chunk.length;
                waiter.text = `${toMb(downloaded)}/${total}`;
            });
            downloadStream.on("end", function () {
                waiter.text = "extracting...";
                extract_zip_1.default(`${storeDir}/chromium.zip`, { dir: `${storeDir}/chromium` }, function (err) {
                    return __awaiter(this, void 0, void 0, function* () {
                        if (err) {
                            waiter.fail(err.message);
                            yield chromium_1.cleanChromiumDirectory();
                            yield cleanZipFile(`${storeDir}/chromium.zip`);
                            reject(err);
                        }
                        else {
                            yield cleanZipFile(`${storeDir}/chromium.zip`);
                            const chromePath = yield chromium_1.getChromePath();
                            fs_1.chmodSync(chromePath, 0o755);
                            yield chromium_1.updateStoredRevision(revision);
                            waiter.succeed("done!");
                            resolve();
                        }
                    });
                });
            });
            downloadStream.on("error", function (err) {
                return __awaiter(this, void 0, void 0, function* () {
                    waiter.fail(err.message);
                    yield cleanZipFile(`${storeDir}/chromium.zip`);
                    reject(err);
                });
            });
        });
    });
}
exports.downloadChromium = downloadChromium;
function toMb(bytes) {
    const mb = (bytes / 1000 / 1000).toFixed(3);
    return `${mb}MB`;
}
function cleanZipFile(zipPath) {
    return new Promise(function (resolve) {
        fs_1.unlink(zipPath, function (_err) {
            resolve();
        });
    });
}
