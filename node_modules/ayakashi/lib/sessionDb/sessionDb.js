"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const sequelize_1 = require("sequelize");
const path_1 = require("path");
function sessionDbInit(storeProjectFolder, opts) {
    return __awaiter(this, void 0, void 0, function* () {
        const sessionDb = new sequelize_1.Sequelize({
            dialect: "sqlite",
            storage: path_1.join(storeProjectFolder, "session_db.sqlite"),
            logging: false
        });
        const UserAgentDataModel = sessionDb.define("UserAgentData", {
            userAgentData: sequelize_1.JSON
        }, {
            timestamps: false,
            freezeTableName: true
        });
        const CookieModel = sessionDb.define("Cookie", {
            id: { type: sequelize_1.INTEGER, primaryKey: true, autoIncrement: true, allowNull: false },
            key: { type: sequelize_1.TEXT, allowNull: false },
            value: { type: sequelize_1.TEXT, allowNull: false },
            expires: { type: sequelize_1.DATE, allowNull: true },
            maxAge: { type: sequelize_1.INTEGER, allowNull: true },
            domain: { type: sequelize_1.TEXT, allowNull: false },
            path: { type: sequelize_1.TEXT, allowNull: false },
            secure: { type: sequelize_1.BOOLEAN, allowNull: false, defaultValue: true },
            httpOnly: { type: sequelize_1.BOOLEAN, allowNull: false, defaultValue: true },
            hostOnly: { type: sequelize_1.BOOLEAN },
            creation: { type: sequelize_1.DATE },
            lastAccessed: { type: sequelize_1.DATE }
        }, {
            freezeTableName: true,
            indexes: [{
                    unique: true,
                    fields: ["domain", "path", "key"]
                }]
        });
        if (opts.create) {
            yield sessionDb.sync();
        }
        return { sessionDb, UserAgentDataModel, CookieModel };
    });
}
exports.sessionDbInit = sessionDbInit;
