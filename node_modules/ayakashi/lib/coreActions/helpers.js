"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
function default_1(ayakashiInstance) {
    ayakashiInstance.registerAction("getPosition", function (prop) {
        return __awaiter(this, void 0, void 0, function* () {
            const myProp = this.prop(prop);
            if (!myProp)
                throw new Error("<getPosition> needs a valid prop");
            const matchCount = yield myProp.trigger();
            if (matchCount === 0)
                throw new Error("<getPosition> needs a prop with at least 1 match");
            const sizeAndPosition = yield this.evaluate(function (scopedPropId) {
                const node = this.propTable[scopedPropId].matches[0];
                const clientRec = node.getBoundingClientRect();
                return {
                    bottom: clientRec.bottom,
                    top: clientRec.top,
                    left: clientRec.left,
                    right: clientRec.right,
                    height: clientRec.height,
                    width: clientRec.width
                };
            }, myProp.id);
            const x = sizeAndPosition.left + (sizeAndPosition.width / 2);
            const y = sizeAndPosition.top + (sizeAndPosition.height / 2);
            return { x, y };
        });
    });
    ayakashiInstance.registerAction("getNodeId", function (prop) {
        return __awaiter(this, void 0, void 0, function* () {
            const myProp = this.prop(prop);
            if (!myProp)
                throw new Error("<getNodeId> needs a valid prop");
            const matchCount = yield myProp.trigger();
            if (matchCount === 0)
                throw new Error("<getNodeId> needs a prop with at least 1 match");
            const document = yield this.__connection.client.DOM.getDocument();
            let rootNode = document.root;
            if (rootNode.nodeName === "IFRAME" && rootNode.contentDocument) {
                rootNode = rootNode.contentDocument;
            }
            const selector = yield this.evaluate(function (scopedPropId) {
                const node = this.propTable[scopedPropId].matches[0];
                return this.preloaders.getNodeSelector(node);
            }, myProp.id);
            const result = yield this.__connection.client.DOM.querySelector({
                nodeId: rootNode.nodeId,
                selector: selector
            });
            return result.nodeId;
        });
    });
}
exports.default = default_1;
