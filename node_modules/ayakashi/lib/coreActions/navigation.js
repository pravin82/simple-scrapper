"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
function default_1(ayakashiInstance) {
    ayakashiInstance.registerAction("goTo", function (url, timeout = 10000) {
        return __awaiter(this, void 0, void 0, function* () {
            yield ayakashiInstance.__connection.client.Page.stopLoading();
            return new Promise(function (resolve, reject) {
                ayakashiInstance.waitForDomContentLoadedEvent(timeout).then(function () {
                    resolve();
                }).catch(reject);
                ayakashiInstance.__connection.client.Page.navigate({ url }).catch(function () {
                    reject(new Error(`Could not load page: ${url}`));
                });
            });
        });
    });
    ayakashiInstance.registerAction("navigationClick", function (prop, timeout = 10000) {
        return __awaiter(this, void 0, void 0, function* () {
            const myProp = this.prop(prop);
            if (!myProp)
                throw new Error("<navigationClick> needs a valid prop");
            const matchCount = yield myProp.trigger();
            if (matchCount === 0)
                throw new Error("<navigationClick> needs a prop with at least 1 match");
            yield ayakashiInstance.__connection.client.Page.stopLoading();
            yield ayakashiInstance.evaluate(function (scopedPropId) {
                this.propTable[scopedPropId].matches.forEach(function (link) {
                    if (link.target === "_blank") {
                        link.target = "_self";
                    }
                });
            }, myProp.id);
            return new Promise(function (resolve, reject) {
                ayakashiInstance.waitForDomContentLoadedEvent(timeout).then(function () {
                    resolve();
                }).catch(reject);
                ayakashiInstance.click(prop).catch(reject);
            });
        });
    });
    ayakashiInstance.registerAction("spaNavigationClick", function (prop, timeout = 10000) {
        return new Promise(function (resolve, reject) {
            ayakashiInstance.waitForInPageNavigation(timeout).then(function () {
                resolve();
            }).catch(reject);
            ayakashiInstance.click(prop).catch(reject);
        });
    });
}
exports.default = default_1;
