"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
function default_1(ayakashiInstance) {
    ayakashiInstance.registerAction("check", function (prop) {
        return __awaiter(this, void 0, void 0, function* () {
            const myProp = this.prop(prop);
            if (!myProp)
                throw new Error("<check> needs a valid prop");
            const matchCount = yield myProp.trigger();
            if (matchCount === 0)
                throw new Error("<check> needs a prop with at least 1 match");
            yield this.scrollIntoView(myProp);
            const isChecked = yield ayakashiInstance.evaluate(function (scopedPropId) {
                const node = this.propTable[scopedPropId].matches[0];
                return node.checked === true;
            }, myProp.id);
            if (!isChecked) {
                return this.click(myProp);
            }
        });
    });
    ayakashiInstance.registerAction("uncheck", function (prop) {
        return __awaiter(this, void 0, void 0, function* () {
            const myProp = this.prop(prop);
            if (!myProp)
                throw new Error("<uncheck> needs a valid prop");
            const matchCount = yield myProp.trigger();
            if (matchCount === 0)
                throw new Error("<uncheck> needs a prop with at least 1 match");
            yield this.scrollIntoView(myProp);
            const isChecked = yield ayakashiInstance.evaluate(function (scopedPropId) {
                const node = this.propTable[scopedPropId].matches[0];
                return node.checked === true;
            }, myProp.id);
            if (isChecked) {
                return this.click(myProp);
            }
        });
    });
}
exports.default = default_1;
