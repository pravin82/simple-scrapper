import { IPipeProcLogMessageReply, IPipeProcInspectProcMessageReply, IPipeProcReclaimProcMessageReply, IPipeProcSystemProcMessageReply } from "../common/messages";
import { IPipeProcClient, ICommitLog } from ".";
export declare function commit(client: IPipeProcClient, commitLog: ICommitLog | ICommitLog[], callback: (err?: Error | null, logId?: IPipeProcLogMessageReply["data"]["id"]) => void): void;
export declare type innerRange = (client: IPipeProcClient, topic: string, options: {
    start: string;
    end: string;
    limit: number;
    exclusive: boolean;
    reverse: boolean;
}, callback: (err?: null | Error, result?: {
    id: string;
    body: object;
}[]) => void) => void;
export declare const range: innerRange;
export declare function ack(client: IPipeProcClient, procName: string, callback: (err?: Error | null, logId?: string) => void): void;
export declare function ackCommit(client: IPipeProcClient, procName: string, commitLog: ICommitLog | ICommitLog[], callback: (err?: Error | null, result?: {
    ackedLogId: string;
    id: string | string[];
}) => void): void;
export declare function proc(client: IPipeProcClient, topic: string, options: {
    name: string;
    offset: string;
    count?: number;
    maxReclaims?: number;
    reclaimTimeout?: number;
    onMaxReclaimsReached?: string;
}, callback: (err?: null | Error, result?: {
    id: string;
    body: object;
} | {
    id: string;
    body: object;
}[]) => void): void;
export declare function availableProc(client: IPipeProcClient, procList: {
    topic: string;
    name: string;
    offset: string;
    count?: number;
    maxReclaims?: number;
    reclaimTimeout?: number;
    onMaxReclaimsReached?: string;
}[], callback: (err?: null | Error, result?: {
    procName?: string;
    log?: {
        id: string;
        body: object;
    } | {
        id: string;
        body: object;
    }[];
}) => void): void;
export declare function systemProc(client: IPipeProcClient, options: {
    name: string;
    offset: string;
    count?: number;
    maxReclaims?: number;
    reclaimTimeout?: number;
    onMaxReclaimsReached?: string;
    from: string | string[];
    to?: string | string[];
    processor: string | ((result?: {
        id: string;
        body: object;
    } | {
        id: string;
        body: object;
    }[]) => void);
}, callback: (err?: Error | null, myProc?: IPipeProcSystemProcMessageReply["data"]["proc"]) => void): void;
export declare function inspectProc(client: IPipeProcClient, procName: string, callback: (err?: Error | null, myProc?: IPipeProcInspectProcMessageReply["data"]["proc"]) => void): void;
export declare function destroyProc(client: IPipeProcClient, procName: string, callback: (err?: Error | null, myProc?: IPipeProcInspectProcMessageReply["data"]["proc"]) => void): void;
export declare function disableProc(client: IPipeProcClient, procName: string, callback: (err?: Error | null, myProc?: IPipeProcInspectProcMessageReply["data"]["proc"]) => void): void;
export declare function resumeProc(client: IPipeProcClient, procName: string, callback: (err?: Error | null, myProc?: IPipeProcInspectProcMessageReply["data"]["proc"]) => void): void;
export declare function reclaimProc(client: IPipeProcClient, procName: string, callback: (err?: Error | null, lastClaimedRange?: IPipeProcReclaimProcMessageReply["data"]["lastClaimedRange"]) => void): void;
export declare function waitForProcs(client: IPipeProcClient, procFilter: string[], callback: (err?: Error | null) => void): void;
