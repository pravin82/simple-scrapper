"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const uuid_1 = require("uuid");
function prepareMessage(msg) {
    if (!msg.msgKey) {
        msg.msgKey = uuid_1.v4();
    }
    return { type: msg.type, msgKey: msg.msgKey, data: msg.data, errStatus: msg.errStatus };
}
exports.prepareMessage = prepareMessage;
function prepareLogMessage(msg, commitLog) {
    if (Array.isArray(commitLog)) {
        return {
            type: msg.type,
            msgKey: msg.msgKey,
            data: {
                commitLog: commitLog.map(l => {
                    return { topic: l.topic, body: JSON.stringify(l.body) };
                })
            }
        };
    }
    else {
        return {
            type: msg.type,
            msgKey: msg.msgKey,
            data: {
                commitLog: {
                    topic: commitLog.topic,
                    body: JSON.stringify(commitLog.body)
                }
            }
        };
    }
}
exports.prepareLogMessage = prepareLogMessage;
function prepareProcMessage(msg, options) {
    if (!msg.msgKey) {
        msg.msgKey = uuid_1.v4();
    }
    return {
        type: msg.type,
        msgKey: msg.msgKey,
        data: {
            options: {
                name: options.name,
                topic: options.topic,
                offset: options.offset,
                count: options.count,
                maxReclaims: options.maxReclaims,
                reclaimTimeout: options.reclaimTimeout,
                onMaxReclaimsReached: options.onMaxReclaimsReached
            }
        }
    };
}
exports.prepareProcMessage = prepareProcMessage;
function prepareAvailableProcMessage(msg, procList) {
    if (!msg.msgKey) {
        msg.msgKey = uuid_1.v4();
    }
    return {
        type: msg.type,
        msgKey: msg.msgKey,
        data: {
            procList: procList
        }
    };
}
exports.prepareAvailableProcMessage = prepareAvailableProcMessage;
function prepareSystemProcMessage(options) {
    return {
        type: "system_proc",
        msgKey: uuid_1.v4(),
        data: {
            options: {
                name: options.name,
                offset: options.offset,
                count: options.count,
                maxReclaims: options.maxReclaims,
                reclaimTimeout: options.reclaimTimeout,
                onMaxReclaimsReached: options.onMaxReclaimsReached,
                from: options.from,
                to: options.to,
                inlineProcessor: options.inlineProcessor,
                externalProcessor: options.externalProcessor
            }
        }
    };
}
exports.prepareSystemProcMessage = prepareSystemProcMessage;
function prepareAckLogMessage(msg, procname, commitLog) {
    if (Array.isArray(commitLog)) {
        return {
            type: msg.type,
            msgKey: msg.msgKey,
            data: {
                procName: procname,
                commitLog: commitLog.map(l => {
                    return { topic: l.topic, body: JSON.stringify(l.body) };
                })
            }
        };
    }
    else {
        return {
            type: msg.type,
            msgKey: msg.msgKey,
            data: {
                procName: procname,
                commitLog: {
                    topic: commitLog.topic,
                    body: JSON.stringify(commitLog.body)
                }
            }
        };
    }
}
exports.prepareAckLogMessage = prepareAckLogMessage;
function prepareAckMessage(msg, procname) {
    return {
        type: msg.type,
        msgKey: msg.msgKey,
        data: {
            procName: procname
        }
    };
}
exports.prepareAckMessage = prepareAckMessage;
function prepareDestroyProcMessage(msg, procname) {
    return {
        type: msg.type,
        msgKey: msg.msgKey,
        data: {
            procName: procname
        }
    };
}
exports.prepareDestroyProcMessage = prepareDestroyProcMessage;
function prepareDisableProcMessage(msg, procname) {
    return {
        type: msg.type,
        msgKey: msg.msgKey,
        data: {
            procName: procname
        }
    };
}
exports.prepareDisableProcMessage = prepareDisableProcMessage;
function prepareResumeProcMessage(msg, procname) {
    return {
        type: msg.type,
        msgKey: msg.msgKey,
        data: {
            procName: procname
        }
    };
}
exports.prepareResumeProcMessage = prepareResumeProcMessage;
function prepareReclaimProcMessage(msg, procname) {
    return {
        type: msg.type,
        msgKey: msg.msgKey,
        data: {
            procName: procname
        }
    };
}
exports.prepareReclaimProcMessage = prepareReclaimProcMessage;
function prepareWorkerInitMessage(address, tls, workerConcurrency, workerRestartAfter) {
    return {
        type: "worker_init",
        msgKey: uuid_1.v4(),
        data: {
            address: address,
            tls: tls,
            workerConcurrency: workerConcurrency,
            workerRestartAfter: workerRestartAfter
        }
    };
}
exports.prepareWorkerInitMessage = prepareWorkerInitMessage;
function prepareRegisterSystemProcsMessage(procs, systemProcs) {
    return {
        type: "register_system_procs",
        msgKey: uuid_1.v4(),
        data: {
            procs: procs,
            systemProcs: systemProcs
        }
    };
}
exports.prepareRegisterSystemProcsMessage = prepareRegisterSystemProcsMessage;
